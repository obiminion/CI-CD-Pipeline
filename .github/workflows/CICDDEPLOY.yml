name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Debug current dir
      run: |
        pwd
        ls -al

    - name: SonarQube Analysis
      uses: sonarsource/sonarcloud-github-action@master
      with:
        args: >
          -Dsonar.projectKey=obiminion_CI-CD-Pipeline
          -Dsonar.organization=obiminion
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GH_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'

    - name: Download and Unzip Dependency-Check
      run: |
        wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
        unzip dependency-check-8.4.0-release.zip

    - name: Run OWASP Dependency-Check
      run: ./dependency-check/bin/dependency-check.sh --project "My Project" --scan . --disableAssembly

    - name: Build Docker Image
      run: docker build -t my-web-app .

    - name: Trivy Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'my-web-app'
        token: ${{ secrets.MY_GH_TOKEN }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Version
      run: terraform --version

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Debug before Terraform Apply
      run: echo "About to run Terraform Apply."

    - name: Terraform Apply
      run: terraform apply -auto-approve -var "DO_TOKEN=${{ secrets.DO_TOKEN }}" -var "SSH_KEY=${{ secrets.SSH_KEY }}"
      env:
        DO_TOKEN: ${{ secrets.DO_TOKEN }}
        SSH_KEY: ${{ secrets.SSH_KEY }}
        TF_LOG: DEBUG
        
    - name: Get Droplet IP and Store in File
      run: terraform output -raw droplet_ip_address > droplet_ip.txt

    - name: Display Droplet IP from File
      run: cat droplet_ip.txt

    - name: Set and Clean Droplet IP
      run: |
        RAW_IP=$(cat droplet_ip.txt)
        echo "Raw IP is $RAW_IP"
        CLEANED_IP=$(echo $RAW_IP | awk -F "::" '{print $1}')
        echo "Cleaned IP is $CLEANED_IP"
        echo "DROPLET_IP=$CLEANED_IP" >> $GITHUB_ENV
        
    - name: Debug Environment Variables
      run: echo "Debug DROPLET_IP:$DROPLET_IP"

    # SSH and Deployment Steps
    - name: Initialize and Setup SSH
      run: |
        eval $(ssh-agent -s)
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
        chmod 600 id_rsa
        ssh-add id_rsa

    - name: Deploy to DigitalOcean
      run: |
        echo "Deploying to IP $DROPLET_IP"
        ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@$DROPLET_IP "
          docker pull my-web-app:latest
          docker stop web-container || true
          docker rm web-container || true
          docker run --name web-container -d -p 80:80 my-web-app:latest
        "
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
